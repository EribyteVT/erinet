apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${APPLICATION_NAME}
  labels:
    app: ${APPLICATION_NAME}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ${APPLICATION_NAME}
  template:
    metadata:
      labels:
        app: ${APPLICATION_NAME}
    spec:
      containers:
        - name: ${APPLICATION_NAME}
          image: eribyteofficial/erinet
          imagePullPolicy: Always
          ports:
            - containerPort: 8085
          env:
            - name: ALLOW_EMPTY_PASSWORD
              value: "yes"
            - name: AUTH_SECRET
              valueFrom:
                secretKeyRef:
                  name: ${SECRET_NAME}
                  key: AUTH_SECRET
            - name: AUTH_DISCORD_ID
              valueFrom:
                secretKeyRef:
                  name: ${SECRET_NAME}
                  key: AUTH_DISCORD_ID
            - name: AUTH_DISCORD_SECRET
              valueFrom:
                secretKeyRef:
                  name: ${SECRET_NAME}
                  key: AUTH_DISCORD_SECRET
            - name: NEXTAUTH_SECRET
              valueFrom:
                secretKeyRef:
                  name: ${SECRET_NAME}
                  key: NEXTAUTH_SECRET
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: ${SECRET_NAME}
                  key: DATABASE_URL
            - name: DISCORD_BOT_TOKEN
              valueFrom:
                secretKeyRef:
                  name: ${SECRET_NAME}
                  key: DISCORD_BOT_TOKEN
            - name: TWITCH_CLIENT_ID
              valueFrom:
                secretKeyRef:
                  name: ${SECRET_NAME}
                  key: TWITCH_CLIENT_ID
            - name: TWITCH_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: ${SECRET_NAME}
                  key: TWITCH_CLIENT_SECRET
            - name: ENCRYPTION_KEY
              valueFrom:
                secretKeyRef:
                  name: ${SECRET_NAME}
                  key: ENCRYPTION_KEY
            - name: NEXT_PUBLIC_API_BASE_URL
              valueFrom:
                configMapKeyRef:
                  name: ${CONFIG_NAME}
                  key: NEXT_PUBLIC_API_BASE_URL
            - name: NEXT_PUBLIC_TRUSTED_HOSTS
              valueFrom:
                configMapKeyRef:
                  name: ${CONFIG_NAME}
                  key: NEXT_PUBLIC_TRUSTED_HOSTS
            - name: NEXT_SERVER_ACTIONS_ALLOWED_ORIGINS
              valueFrom:
                configMapKeyRef:
                  name: ${CONFIG_NAME}
                  key: NEXT_SERVER_ACTIONS_ALLOWED_ORIGINS
            - name: AUTH_DISCORD_REDIRECT_URI
              valueFrom:
                configMapKeyRef:
                  name: ${CONFIG_NAME}
                  key: AUTH_DISCORD_REDIRECT_URI
            - name: TWITCH_REDIRECT_URI
              valueFrom:
                configMapKeyRef:
                  name: ${CONFIG_NAME}
                  key: TWITCH_REDIRECT_URI
            - name: NEXTAUTH_URL
              valueFrom:
                configMapKeyRef:
                  name: ${CONFIG_NAME}
                  key: NEXTAUTH_URL
            - name: AUTH_TRUST_HOST
              valueFrom:
                configMapKeyRef:
                  name: ${CONFIG_NAME}
                  key: AUTH_TRUST_HOST
            - name: DEFAULT_REDIRECT_URL
              valueFrom:
                configMapKeyRef:
                  name: ${CONFIG_NAME}
                  key: DEFAULT_REDIRECT_URL
            - name: NEXT_PUBLIC_DISCORD_CLIENT_ID
              valueFrom:
                configMapKeyRef:
                  name: ${CONFIG_NAME}
                  key: NEXT_PUBLIC_DISCORD_CLIENT_ID
            - name: NEXT_PUBLIC_CRUD_URL
              valueFrom:
                configMapKeyRef:
                  name: ${CONFIG_NAME}
                  key: NEXT_PUBLIC_CRUD_URL
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "2Gi"
              cpu: "2000m"
          livenessProbe:
            httpGet:
              path: /
              port: 8085
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /
              port: 8085
            initialDelaySeconds: 5
            periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: ${APPLICATION_NAME}
  labels:
    app: ${APPLICATION_NAME}
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "external"
    service.beta.kubernetes.io/aws-load-balancer-nlb-target-type: "ip"
    service.beta.kubernetes.io/aws-load-balancer-scheme: "internet-facing"
    
    # SSL Certificate from ACM
    service.beta.kubernetes.io/aws-load-balancer-ssl-cert: "arn:aws:acm:us-east-2:364652779695:certificate/fba2a833-b44f-4bab-a2c1-74e8aff6e822"
    
    # SSL Configuration
    service.beta.kubernetes.io/aws-load-balancer-ssl-ports: "443"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "http"
    service.beta.kubernetes.io/aws-load-balancer-listen-ports: '[{"HTTP": 80}, {"HTTPS": 443}]'
    
    # Security Policy
    service.beta.kubernetes.io/aws-load-balancer-ssl-negotiation-policy: "ELBSecurityPolicy-TLS-1-2-2017-01"
    
    # Optional: Redirect HTTP to HTTPS
    service.beta.kubernetes.io/aws-load-balancer-ssl-redirect: "443"
spec:
  type: LoadBalancer
  selector:
    app: ${APPLICATION_NAME}
  ports:
    - name: http
      port: 80
      targetPort: 8085
      protocol: TCP
    - name: https
      port: 443
      targetPort: 8085
      protocol: TCP
