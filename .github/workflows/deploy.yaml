name: Deploy to EKS (Docker Hub)

on:
  push:
    branches: [main, stage]
  # Manual deployment trigger with options
  workflow_dispatch:
    inputs:
      environment:
        description: "Deployment environment"
        required: true
        default: "stage"
        type: choice
        options:
          - stage
          - prod
      image_tag:
        description: "Docker image tag to deploy (leave empty for latest)"
        required: false
        default: "latest"
        type: string
      skip_build:
        description: "Skip building new image (deploy existing image)"
        required: false
        default: false
        type: boolean

env:
  DOCKER_IMAGE_NAME: "eribyteofficial/erinet"
  EKS_CLUSTER_NAME: "Eribot-prod"
  AWS_REGION: "us-east-2"

jobs:
  # Determine environment based on branch or manual input
  setup:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
      image-tag: ${{ steps.set-env.outputs.image-tag }}
      skip-build: ${{ steps.set-env.outputs.skip-build }}
    steps:
      - name: Set environment variables
        id: set-env
        run: |
          # Handle manual dispatch vs automatic push
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # Manual deployment
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
            
            # Use provided image tag or generate new one
            if [[ "${{ github.event.inputs.image_tag }}" == "latest" ]] || [[ -z "${{ github.event.inputs.image_tag }}" ]]; then
              echo "image-tag=latest" >> $GITHUB_OUTPUT
            else
              echo "image-tag=${{ github.event.inputs.image_tag }}" >> $GITHUB_OUTPUT
            fi
            
            echo "skip-build=${{ github.event.inputs.skip_build }}" >> $GITHUB_OUTPUT
          else
            # Automatic deployment based on branch
            if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
              echo "environment=prod" >> $GITHUB_OUTPUT
            elif [[ "${{ github.ref }}" == "refs/heads/stage" ]]; then
              echo "environment=stage" >> $GITHUB_OUTPUT
            else
              echo "environment=dev" >> $GITHUB_OUTPUT
            fi
            
            # Generate new tag for automatic builds
            echo "image-tag=${GITHUB_SHA::8}-$(date +%s)" >> $GITHUB_OUTPUT
            echo "skip-build=false" >> $GITHUB_OUTPUT
          fi

  # Build and push to Docker Hub (same as your Jenkins setup)
  build:
    needs: setup
    runs-on: ubuntu-latest
    # Only run if not skipping build
    if: needs.setup.outputs.skip-build == 'false'
    outputs:
      image: ${{ steps.build-image.outputs.image }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        id: build-image
        env:
          IMAGE_TAG: ${{ needs.setup.outputs.image-tag }}
        run: |
          # Determine asset prefix based on environment
          if [[ "${{ needs.setup.outputs.environment }}" == "stage" ]]; then
            ASSET_PREFIX="https://stage.eri.bot"
          else
            ASSET_PREFIX="https://eri.bot"
          fi

          # Build and push Docker image (same as your Jenkins setup)
          docker build \
            --build-arg NEXT_PUBLIC_ASSET_PREFIX=$ASSET_PREFIX \
            --build-arg ASSET_PREFIX=$ASSET_PREFIX \
            -t ${{ env.DOCKER_IMAGE_NAME }}:$IMAGE_TAG \
            -t ${{ env.DOCKER_IMAGE_NAME }}:latest .

          # Push both tags
          docker push ${{ env.DOCKER_IMAGE_NAME }}:$IMAGE_TAG
          docker push ${{ env.DOCKER_IMAGE_NAME }}:latest

          echo "image=${{ env.DOCKER_IMAGE_NAME }}:$IMAGE_TAG" >> $GITHUB_OUTPUT

  # Deploy to EKS (this is the only new part)
  deploy:
    needs: [setup, build]
    runs-on: ubuntu-latest
    # Always run deploy, but build job might be skipped
    if: always() && !failure() && !cancelled() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/stage' || github.event_name == 'workflow_dispatch')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: "v1.28.0"

      - name: Update kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

      - name: Set environment variables for deployment
        run: |
          # Set environment-specific variables (same logic as your Jenkins)
          if [[ "${{ needs.setup.outputs.environment }}" == "stage" ]]; then
            echo "APPLICATION_NAME=erinet-stage" >> $GITHUB_ENV
            echo "SECRET_NAME=erinet-secrets-stage" >> $GITHUB_ENV
            echo "CONFIG_NAME=erinet-config-stage" >> $GITHUB_ENV
            echo "HOST_NAME=stage.eri.bot" >> $GITHUB_ENV
            echo "EXPOSE_PORT=30085" >> $GITHUB_ENV
            echo "ASSET_PREFIX=https://stage.eri.bot" >> $GITHUB_ENV
          else
            echo "APPLICATION_NAME=erinet-prod" >> $GITHUB_ENV
            echo "SECRET_NAME=erinet-secrets-prod" >> $GITHUB_ENV
            echo "CONFIG_NAME=erinet-config-prod" >> $GITHUB_ENV
            echo "HOST_NAME=eri.bot" >> $GITHUB_ENV
            echo "EXPOSE_PORT=30086" >> $GITHUB_ENV
            echo "ASSET_PREFIX=https://eri.bot" >> $GITHUB_ENV
          fi

          # Determine which image to deploy
          if [[ "${{ needs.setup.outputs.skip-build }}" == "true" ]]; then
            # Use existing image tag specified in manual dispatch
            echo "DOCKER_IMAGE=${{ env.DOCKER_IMAGE_NAME }}:${{ needs.setup.outputs.image-tag }}" >> $GITHUB_ENV
            echo "🚀 Deploying existing image: ${{ env.DOCKER_IMAGE_NAME }}:${{ needs.setup.outputs.image-tag }}"
          else
            # Use newly built image
            echo "DOCKER_IMAGE=${{ needs.build.outputs.image }}" >> $GITHUB_ENV
            echo "🚀 Deploying newly built image: ${{ needs.build.outputs.image }}"
          fi

      - name: Install envsubst
        run: |
          sudo apt-get update
          sudo apt-get install -y gettext-base

      - name: Generate Kubernetes manifests
        run: |
          # Use your existing deployment.yaml as template
          envsubst < deployment.yaml > k8s-deployment.yaml

          # Show what we're deploying
          echo "Generated Kubernetes manifest:"
          cat k8s-deployment.yaml

      - name: Deploy to EKS
        run: |
          echo "🚀 Starting deployment to ${{ needs.setup.outputs.environment }} environment..."
          echo "📦 Image: ${{ env.DOCKER_IMAGE }}"

          # Apply the deployment (same as your Jenkins)
          kubectl apply -f k8s-deployment.yaml

          # Wait for deployment to be ready
          kubectl rollout status deployment/${{ env.APPLICATION_NAME }} --timeout=300s

          # Restart deployment to ensure new image is pulled
          kubectl rollout restart deployment/${{ env.APPLICATION_NAME }}

          # Wait for restart to complete
          kubectl rollout status deployment/${{ env.APPLICATION_NAME }} --timeout=300s

      - name: Verify deployment
        run: |
          echo "✅ Deployment completed successfully!"
          echo "🌍 Environment: ${{ needs.setup.outputs.environment }}"
          echo "📦 Image: ${{ env.DOCKER_IMAGE }}"
          echo ""

          kubectl get pods -l app=${{ env.APPLICATION_NAME }}
          kubectl get service ${{ env.APPLICATION_NAME }}

          # Show recent events
          echo ""
          echo "📋 Recent events:"
          kubectl get events --sort-by='.lastTimestamp' | tail -10

          # Show service endpoint info
          echo ""
          echo "🌐 Service endpoints:"
          kubectl get service ${{ env.APPLICATION_NAME }} -o wide
